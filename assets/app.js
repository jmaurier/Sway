angular.module("app",["ngRoute"]),angular.module("app",["ngRoute","toastr"]).controller("ApplicationCtrl",["$scope","$location","$window","UserSvc","toastr",function(e,t,n,a,o){if(e.$on("login",function(n,a){e.currentUser=a,t.path("/")}),e.logout=function(){delete e.currentUser,t.path("/login"),window.sessionStorage.removeItem("token")},a.isLoggedIn()){a.getUser().then(function(t){e.currentUser=t})}else t.path("/login")}]),angular.module("app").controller("DashboardCtrl",["$scope","$location","UserSvc","TimesheetSvc","toastr",function(e,t,n,a,o){n.isLoggedIn()||t.path("/login"),e.createNewTimeSheet=function(n,o){var r=new Date(o.getFullYear(),o.getMonth(),o.getDate()+1);r===o&&console.log(r),a.create({title:n,week_beginning:o,week_one:{sunday:{date:Date(o.getFullYear(),o.getMonth(),o.getDate()+5)},monday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+1)},tuesday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+2)},wednesday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+3)},thursday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+4)},friday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+5)},saturday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+6)}},week_two:{sunday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+7)},monday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+8)},tuesday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+9)},wednesday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+10)},thursday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+11)},friday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+12)},saturday:{date:new Date(o.getFullYear(),o.getMonth(),o.getDate()+13)}}}).success(function(n){e.timesheets.unshift(n),t.path("/")})},a.fetch().success(function(t){console.log(t),e.timesheets=t})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","toastr",function(e,t,n){e.login=function(n,a){e.errorMsg="",t.login(n,a).then(function(t){e.$emit("login",t)},function(t){e.errorMsg="Incorrect H Number/Password."})}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(e,t){e.register=function(n,a,o,r){t.register(n,a,o,r).then(function(t){e.$emit("login",t)})}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"DashboardCtrl",templateUrl:"/templates/dashboard.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/templates/login.html"}).when("/timesheet/:timesheet_id",{controller:"TimesheetCtrl",templateUrl:"/templates/timesheet.html"})}]),angular.module("app").controller("TimesheetCtrl",["$scope","$routeParams","$location","UserSvc","TimesheetSvc","toastr",function(e,t,n,a,o,r){a.isLoggedIn()||n.path("/login"),o.fetchById(t.timesheet_id).then(function(t){e.timesheet=t.data})}]),angular.module("app").service("TimesheetSvc",["$http",function(e){this.fetch=function(){return e.get("/api/timesheets")},this.fetchById=function(t){return e.get("/api/timesheets/"+t)},this.create=function(t){return e.post("/api/timesheets",t)}}]),angular.module("app").service("UserSvc",["$http",function(e){var t=this;t.getUser=function(){return e.get("/api/users").then(function(e){return e.data})},t.login=function(n,a){return e.post("/api/sessions",{H_number:n,password:a}).then(function(n){return window.sessionStorage.token=n.data,e.defaults.headers.common["x-auth"]=n.data,t.getUser()})},t.register=function(n,a,o,r){return e.post("/api/users",{H_number:n,password:a,name:o,emailaddr:r}).then(function(){return t.login(n,a)})},t.isLoggedIn=function(){var t=!1;return window.sessionStorage.token&&(e.defaults.headers.common["x-auth"]=window.sessionStorage.token,t=!0),t}}]);
//# sourceMappingURL=data:application/json;base64,