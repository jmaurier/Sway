angular.module("app",["ngRoute"]),angular.module("app",["ngRoute","toastr"]).controller("ApplicationCtrl",["$scope","$location","$window","UserSvc","toastr",function(e,t,n,o,a){if(e.$on("login",function(n,o){e.currentUser=o,t.path("/")}),e.logout=function(){delete e.currentUser,t.path("/login"),window.sessionStorage.removeItem("token")},o.isLoggedIn()){o.getUser().then(function(t){e.currentUser=t})}else t.path("/login")}]),angular.module("app").controller("DashboardCtrl",["$scope","$location","UserSvc","TimesheetSvc","toastr",function(e,t,n,o,a){n.isLoggedIn()||t.path("/login"),e.createNewTimeSheet=function(n,a){var r=new Date(a.getFullYear(),a.getMonth(),a.getDate()+1);r===a&&console.log(r),o.create({title:n,week_beginning:a,week_one:{sunday:{date:Date(a.getFullYear(),a.getMonth(),a.getDate()+5)},monday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+1)},tuesday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+2)},wednesday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+3)},thursday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+4)},friday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+5)},saturday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+6)}},week_two:{sunday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+7)},monday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+8)},tuesday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+9)},wednesday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+10)},thursday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+11)},friday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+12)},saturday:{date:new Date(a.getFullYear(),a.getMonth(),a.getDate()+13)}}}).success(function(n){e.timesheets.unshift(n),t.path("/")})},o.fetch().success(function(t){console.log(t),e.timesheets=t})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","toastr",function(e,t,n){e.login=function(n,o){e.errorMsg="",t.login(n,o).then(function(t){e.$emit("login",t)},function(t){e.errorMsg="Incorrect H Number/Password."})}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","toastr",function(e,t,n){e.error=!1,e.errormsg="",e.register=function(o,a,r,s){t.register(o,a,r,s).then(function(t){e.$emit("login",t)},function(t){console.log(t),401==t.status&&(e.error=!0,n.error("This H-Number is already in use, faggot.","Error"))})}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"DashboardCtrl",templateUrl:"/templates/dashboard.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"/templates/login.html"}).when("/timesheet/:timesheet_id",{controller:"TimesheetCtrl",templateUrl:"/templates/timesheet.html"})}]),angular.module("app").controller("TimesheetCtrl",["$scope","$routeParams","$location","UserSvc","TimesheetSvc","toastr",function(e,t,n,o,a,r){o.isLoggedIn()||n.path("/login"),a.fetchById(t.timesheet_id).then(function(t){e.timesheet=t.data})}]),angular.module("app").service("TimesheetSvc",["$http",function(e){this.fetch=function(){return e.get("/api/timesheets")},this.fetchById=function(t){return e.get("/api/timesheets/"+t)},this.create=function(t){return e.post("/api/timesheets",t)}}]),angular.module("app").service("UserSvc",["$http",function(e){var t=this;t.getUser=function(){return e.get("/api/users").then(function(e){return e.data})},t.login=function(n,o){return e.post("/api/sessions",{H_number:n,password:o}).then(function(n){return window.sessionStorage.token=n.data,e.defaults.headers.common["x-auth"]=n.data,t.getUser()})},t.register=function(n,o,a,r){return e.post("/api/users",{H_number:n,password:o,name:a,emailaddr:r}).then(function(){return t.login(n,o)},function(e){console.log(e)})},t.isLoggedIn=function(){var t=!1;return window.sessionStorage.token&&(e.defaults.headers.common["x-auth"]=window.sessionStorage.token,t=!0),t}}]);
//# sourceMappingURL=data:application/json;base64,